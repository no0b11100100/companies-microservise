// Code generated by MockGen. DO NOT EDIT.
// Source: updateRecordHandler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	database "companies/cmd/internal/database"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockupdateRecordDB is a mock of updateRecordDB interface.
type MockupdateRecordDB struct {
	ctrl     *gomock.Controller
	recorder *MockupdateRecordDBMockRecorder
}

// MockupdateRecordDBMockRecorder is the mock recorder for MockupdateRecordDB.
type MockupdateRecordDBMockRecorder struct {
	mock *MockupdateRecordDB
}

// NewMockupdateRecordDB creates a new mock instance.
func NewMockupdateRecordDB(ctrl *gomock.Controller) *MockupdateRecordDB {
	mock := &MockupdateRecordDB{ctrl: ctrl}
	mock.recorder = &MockupdateRecordDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockupdateRecordDB) EXPECT() *MockupdateRecordDBMockRecorder {
	return m.recorder
}

// UpdateRecord mocks base method.
func (m *MockupdateRecordDB) UpdateRecord(arg0 database.CompanyInfo, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRecord", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRecord indicates an expected call of UpdateRecord.
func (mr *MockupdateRecordDBMockRecorder) UpdateRecord(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRecord", reflect.TypeOf((*MockupdateRecordDB)(nil).UpdateRecord), arg0, arg1)
}

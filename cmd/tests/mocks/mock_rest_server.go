// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRESTServer is a mock of RESTServer interface.
type MockRESTServer struct {
	ctrl     *gomock.Controller
	recorder *MockRESTServerMockRecorder
}

// MockRESTServerMockRecorder is the mock recorder for MockRESTServer.
type MockRESTServerMockRecorder struct {
	mock *MockRESTServer
}

// NewMockRESTServer creates a new mock instance.
func NewMockRESTServer(ctrl *gomock.Controller) *MockRESTServer {
	mock := &MockRESTServer{ctrl: ctrl}
	mock.recorder = &MockRESTServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRESTServer) EXPECT() *MockRESTServerMockRecorder {
	return m.recorder
}

// Serve mocks base method.
func (m *MockRESTServer) Serve() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Serve")
}

// Serve indicates an expected call of Serve.
func (mr *MockRESTServerMockRecorder) Serve() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockRESTServer)(nil).Serve))
}

// Shutdown mocks base method.
func (m *MockRESTServer) Shutdown() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockRESTServerMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockRESTServer)(nil).Shutdown))
}

// Code generated by MockGen. DO NOT EDIT.
// Source: getRecordHandler.go

// Package mocks is a generated GoMock package.
package mocks

import (
	database "companies/cmd/internal/database"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockgetRecordDB is a mock of getRecordDB interface.
type MockgetRecordDB struct {
	ctrl     *gomock.Controller
	recorder *MockgetRecordDBMockRecorder
}

// MockgetRecordDBMockRecorder is the mock recorder for MockgetRecordDB.
type MockgetRecordDBMockRecorder struct {
	mock *MockgetRecordDB
}

// NewMockgetRecordDB creates a new mock instance.
func NewMockgetRecordDB(ctrl *gomock.Controller) *MockgetRecordDB {
	mock := &MockgetRecordDB{ctrl: ctrl}
	mock.recorder = &MockgetRecordDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgetRecordDB) EXPECT() *MockgetRecordDBMockRecorder {
	return m.recorder
}

// GetRecord mocks base method.
func (m *MockgetRecordDB) GetRecord(arg0 uuid.UUID) (database.CompanyInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRecord", arg0)
	ret0, _ := ret[0].(database.CompanyInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRecord indicates an expected call of GetRecord.
func (mr *MockgetRecordDBMockRecorder) GetRecord(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRecord", reflect.TypeOf((*MockgetRecordDB)(nil).GetRecord), arg0)
}

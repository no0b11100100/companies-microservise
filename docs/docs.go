// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/companies": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Creates a new company with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Companies"
                ],
                "summary": "Create a new company record",
                "parameters": [
                    {
                        "description": "Company to create",
                        "name": "company",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.CompanyInfo"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created. Returns the new company ID",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request – invalid input or error",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "409": {
                        "description": "Conflict – record already exists",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/companies/{id}": {
            "get": {
                "description": "Retrieves company information using a UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Companies"
                ],
                "summary": "Get a company by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Company UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Company found",
                        "schema": {
                            "$ref": "#/definitions/database.CompanyInfo"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Company not found",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes a company record by its UUID",
                "tags": [
                    "Companies"
                ],
                "summary": "Delete a company",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Company UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully deleted",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid UUID or deletion failed",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates company information by UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Companies"
                ],
                "summary": "Update an existing company",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Company UUID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated company data",
                        "name": "company",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/database.CompanyInfo"
                        }
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Accepted – update in progress",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad request – invalid UUID or body",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "database.CompanyInfo": {
            "type": "object",
            "properties": {
                "companyid": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "employees": {
                    "type": "integer"
                },
                "isRegistered": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Company API",
	Description:      "REST API for managing companies",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
